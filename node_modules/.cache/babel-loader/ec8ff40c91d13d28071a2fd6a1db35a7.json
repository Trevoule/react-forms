{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initialInputState = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      isTouched: true\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      isTouched: false,\n      value: \"\"\n    };\n  }\n\n  return initialInputState;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n  //   const valueIsValid = validateValue(enteredValue);\n  //   const hasError = !valueIsValid && isTouched;\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    // setEnteredValue(event.target.value);\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n\n  const inputBlurHandler = event => {\n    // setIsTouched(true);\n    dispatch({\n      type: \"BLUR\",\n      value: event.target.value\n    });\n  };\n\n  const reset = () => {\n    // setEnteredValue(\"\");\n    // setIsTouched(false);\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    // value: enteredValue,\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["/home/vladislav/Desktop/Work - Backup/React/react-forms/src/hooks/use-reducer.js"],"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,SAAS,EAAE;AAFa,CAA1B;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACD;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AAAEJ,MAAAA,SAAS,EAAE;AAAb,KAAP;AACD;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,KAAb;AAAoBD,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACD;;AAED,SAAOD,iBAAP;AACD,CAdD;;AAgBA,MAAMO,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CACvCI,iBADuC,EAEvCH,iBAFuC,CAAzC,CADkC,CAMlC;AACA;AAEA;AACA;;AAEA,QAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACAJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAArC,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMe,gBAAgB,GAAIF,KAAD,IAAW;AAClC;AACAJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,MAAR;AAAgBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAApC,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMgB,KAAK,GAAG,MAAM;AAClB;AACA;AACAP,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAJD;;AAMA,SAAO;AACL;AACAL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KAFb;AAGLiB,IAAAA,OAAO,EAAEP,YAHJ;AAILC,IAAAA,QAJK;AAKLC,IAAAA,kBALK;AAMLG,IAAAA,gBANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CAxCD;;GAAMV,Q;;AA0CN,eAAeA,QAAf","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialInputState = {\n  value: \"\",\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return { value: action.value, isTouched: state.isTouched };\n  }\n\n  if (action.type === \"BLUR\") {\n    return { isTouched: true };\n  }\n\n  if (action.type === \"RESET\") {\n    return { isTouched: false, value: \"\" };\n  }\n\n  return initialInputState;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(\n    inputStateReducer,\n    initialInputState\n  );\n\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  //   const valueIsValid = validateValue(enteredValue);\n  //   const hasError = !valueIsValid && isTouched;\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = (event) => {\n    // setEnteredValue(event.target.value);\n    dispatch({ type: \"INPUT\", value: event.target.value });\n  };\n\n  const inputBlurHandler = (event) => {\n    // setIsTouched(true);\n    dispatch({ type: \"BLUR\", value: event.target.value });\n  };\n\n  const reset = () => {\n    // setEnteredValue(\"\");\n    // setIsTouched(false);\n    dispatch({ type: \"RESET\" });\n  };\n\n  return {\n    // value: enteredValue,\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}